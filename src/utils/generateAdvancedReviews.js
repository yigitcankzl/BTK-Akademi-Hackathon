import { db } from '../config/firebase';
import { collection, addDoc, getDocs, deleteDoc, doc, serverTimestamp } from 'firebase/firestore';
import productService from '../services/ecommerce/productService';

// Geli≈ümi≈ü yorum ≈üablonlarƒ±
const ADVANCED_REVIEW_TEMPLATES = {
  electronics: [
    {
      rating: 5,
      userName: 'TeknoSever_42',
      comment: 'Harika bir √ºr√ºn! Performansƒ± beklentilerimin √ßok √ºzerinde. √ñzellikle hƒ±z konusunda √ßok memnunum.',
      pros: ['Y√ºksek performans', '≈ûƒ±k tasarƒ±m', 'Kullanƒ±m kolaylƒ±ƒüƒ±', 'Dayanƒ±klƒ± yapƒ±'],
      cons: ['Fiyat biraz y√ºksek', 'Kutu i√ßeriƒüi sƒ±nƒ±rlƒ±'],
      usageContext: '6 aydƒ±r g√ºnl√ºk olarak kullanƒ±yorum. ƒ∞≈ü ve eƒülence i√ßin m√ºkemmel.',
      recommendation: 'Bu fiyat aralƒ±ƒüƒ±nda kesinlikle tavsiye ederim. Kalite/fiyat oranƒ± √ßok iyi.',
      enhanced: true,
      verified: true,
      helpful: Math.floor(Math.random() * 25) + 10
    },
    {
      rating: 4,
      userName: 'DigitalExpert',
      comment: 'Genel olarak memnun kaldƒ±m. Bazƒ± k√º√ß√ºk eksikleri var ama i≈üimi g√∂r√ºyor.',
      pros: ['ƒ∞yi performans', 'Kompakt boyut', 'Sessiz √ßalƒ±≈üma'],
      cons: ['Batarya √∂mr√º kƒ±sa', 'Aksesuar pahalƒ±', 'Manuel yetersiz'],
      usageContext: '√áoƒüunlukla ofis i≈üleri i√ßin kullanƒ±yorum. G√ºnde 6-8 saat aktif kullanƒ±m.',
      recommendation: 'B√ºt√ßeniz varsa bir √ºst model alƒ±n, yoksa bu da idare eder.',
      enhanced: true,
      verified: false,
      helpful: Math.floor(Math.random() * 20) + 5
    }
  ],
  clothing: [
    {
      rating: 5,
      userName: 'ModaA≈üƒ±ƒüƒ±_23',
      comment: 'Kuma≈üƒ± √ßok kaliteli, rengi fotoƒüraftaki gibi. Tam beden aldƒ±m, m√ºkemmel oturdu.',
      pros: ['Kaliteli kuma≈ü', 'Renk harikasƒ±', 'Konforlu', '≈ûƒ±k tasarƒ±m'],
      cons: ['Kargo uzun s√ºrd√º', '√út√º istiyor'],
      usageContext: 'Hem g√ºnl√ºk hem de √∂zel davetlerde giyiyorum. √áok rahat.',
      recommendation: 'Bu markayƒ± herkese tavsiye ederim. Kalite garantili.',
      enhanced: true,
      verified: true,
      helpful: Math.floor(Math.random() * 30) + 15
    },
    {
      rating: 4,
      userName: 'StilSahibi',
      comment: 'G√ºzel bir √ºr√ºn ama beden konusunda dikkatli olun. Biraz dar geliyor.',
      pros: ['Modern tasarƒ±m', 'Kaliteli dikim', 'Renkler canlƒ±'],
      cons: ['Dar kesim', 'Pahalƒ±', 'Leke tutuyor'],
      usageContext: '√áoƒüunlukla i≈ü toplantƒ±larƒ±nda giyiyorum. Profesyonel g√∂r√ºn√ºm veriyor.',
      recommendation: 'Bir beden b√ºy√ºk almanƒ±zƒ± tavsiye ederim.',
      enhanced: true,
      verified: true,
      helpful: Math.floor(Math.random() * 18) + 8
    }
  ],
  home_garden: [
    {
      rating: 5,
      userName: 'EvHanƒ±mƒ±_Pro',
      comment: 'Bu √ºr√ºn evimizin vazge√ßilmezi oldu! Hem pratik hem de √ßok kullanƒ±≈ülƒ±.',
      pros: ['√áok fonksiyonlu', 'Dayanƒ±klƒ± malzeme', 'Kolay temizlik', '≈ûƒ±k g√∂r√ºn√ºm'],
      cons: ['Kurulum zor', 'Aƒüƒ±r'],
      usageContext: 'Her g√ºn kullanƒ±yorum. 1 yƒ±ldƒ±r sorunsuz √ßalƒ±≈üƒ±yor.',
      recommendation: 'Ev ihtiya√ßlarƒ± i√ßin m√ºkemmel bir yatƒ±rƒ±m.',
      enhanced: true,
      verified: true,
      helpful: Math.floor(Math.random() * 22) + 12
    }
  ],
  sports: [
    {
      rating: 5,
      userName: 'SporFanatigi',
      comment: 'Antrenmanlarƒ±mda harika sonu√ßlar alƒ±yorum. Kalitesi ger√ßekten y√ºksek.',
      pros: ['Dayanƒ±klƒ±', 'Konforlu', 'Performans artƒ±rƒ±cƒ±', 'Ergonomik'],
      cons: ['Pahalƒ±', 'Renk se√ßeneƒüi az'],
      usageContext: 'Haftada 4-5 kez antrenman yapƒ±yorum. 8 aydƒ±r kullanƒ±yorum.',
      recommendation: 'Ciddi sporcular i√ßin kesinlikle alƒ±n.',
      enhanced: true,
      verified: true,
      helpful: Math.floor(Math.random() * 28) + 15
    }
  ],
  beauty: [
    {
      rating: 4,
      userName: 'G√ºzellikGuru',
      comment: 'Ciltime √ßok iyi geldi. Doƒüal i√ßeriƒüi sayesinde alerjim olmadƒ±.',
      pros: ['Doƒüal i√ßerik', 'Etkili sonu√ß', 'G√ºzel koku', 'Ekonomik'],
      cons: ['Ambalaj zayƒ±f', 'Hƒ±zla bitiyor'],
      usageContext: 'Sabah ak≈üam kullanƒ±yorum. 2 aydƒ±r d√ºzenli kullanƒ±mda.',
      recommendation: 'Hassas ciltler i√ßin ideal.',
      enhanced: true,
      verified: true,
      helpful: Math.floor(Math.random() * 25) + 10
    }
  ]
};

// Basit yorumlar da ekleyelim
const SIMPLE_REVIEWS = [
  { rating: 5, userName: 'MemnunM√º≈üteri', comment: '√áok beƒüendim, herkese tavsiye ederim!' },
  { rating: 4, userName: 'AlicanK', comment: 'ƒ∞yi bir √ºr√ºn, fiyatƒ±na g√∂re deƒüerli.' },
  { rating: 5, userName: 'Sevgihanƒ±mEfe', comment: 'M√ºkemmel kalite, tekrar alƒ±rƒ±m.' },
  { rating: 3, userName: 'OrtalamaBir_User', comment: 'ƒ∞dare eder, √ßok da k√∂t√º deƒüil.' },
  { rating: 4, userName: 'TecrubeliAlici', comment: 'Kaliteli ama biraz pahalƒ± geldi.' },
  { rating: 5, userName: 'Hƒ±zlƒ±Teslimat', comment: 'Hƒ±zlƒ± geldi, kalitesi de g√ºzel.' },
  { rating: 4, userName: 'DetayciM√º≈üteri', comment: 'Genel olarak memnunum, k√º√ß√ºk eksikler var.' }
];

// Random kullanƒ±cƒ± avatarlarƒ±
const USER_AVATARS = [
  'https://i.pravatar.cc/100?img=1',
  'https://i.pravatar.cc/100?img=2',
  'https://i.pravatar.cc/100?img=3',
  'https://i.pravatar.cc/100?img=4',
  'https://i.pravatar.cc/100?img=5',
  'https://i.pravatar.cc/100?img=6',
  'https://i.pravatar.cc/100?img=7',
  'https://i.pravatar.cc/100?img=8',
  'https://i.pravatar.cc/100?img=9',
  'https://i.pravatar.cc/100?img=10'
];

// Random tarih √ºretme
const getRandomDate = () => {
  const now = new Date();
  const pastDate = new Date(now.getTime() - Math.random() * 180 * 24 * 60 * 60 * 1000); // Son 180 g√ºn
  return pastDate;
};

// Kategoriyi T√ºrk√ße'den ƒ∞ngilizce'ye √ßevir
const mapCategoryToTemplate = (category) => {
  const categoryMap = {
    'Elektronik': 'electronics',
    'Giyim': 'clothing', 
    'Erkek Giyim': 'clothing',
    'Kadƒ±n Giyim': 'clothing',
    '√áocuk Giyim': 'clothing',
    'Ayakkabƒ±': 'clothing',
    'Ev & Ya≈üam': 'home_garden',
    'Spor': 'sports',
    'G√ºzellik': 'beauty'
  };
  
  return categoryMap[category] || 'electronics';
};

// Her √ºr√ºn i√ßin yorum olu≈ütur
const generateReviewsForProduct = (product) => {
  const templateKey = mapCategoryToTemplate(product.category);
  const templates = ADVANCED_REVIEW_TEMPLATES[templateKey] || ADVANCED_REVIEW_TEMPLATES.electronics;
  
  const reviewCount = Math.floor(Math.random() * 8) + 3; // 3-10 arasƒ± yorum
  const reviews = [];
  
  // Geli≈ümi≈ü yorumlardan 1-2 tane ekle
  const advancedCount = Math.min(2, Math.floor(reviewCount * 0.3));
  for (let i = 0; i < advancedCount; i++) {
    const template = templates[Math.floor(Math.random() * templates.length)];
    reviews.push({
      ...template,
      productId: product.id,
      userAvatar: USER_AVATARS[Math.floor(Math.random() * USER_AVATARS.length)],
      date: getRandomDate().toLocaleDateString('tr-TR'),
      createdAt: serverTimestamp()
    });
  }
  
  // Basit yorumlarƒ± ekle
  const simpleCount = reviewCount - advancedCount;
  for (let i = 0; i < simpleCount; i++) {
    const template = SIMPLE_REVIEWS[Math.floor(Math.random() * SIMPLE_REVIEWS.length)];
    reviews.push({
      ...template,
      productId: product.id,
      userAvatar: USER_AVATARS[Math.floor(Math.random() * USER_AVATARS.length)],
      date: getRandomDate().toLocaleDateString('tr-TR'),
      createdAt: serverTimestamp(),
      enhanced: false,
      verified: Math.random() > 0.7, // %30 doƒürulanmƒ±≈ü
      helpful: Math.floor(Math.random() * 15) + 1
    });
  }
  
  return reviews;
};

// Firebase'deki mevcut yorumlarƒ± sil
export const clearExistingReviews = async () => {
  try {
    console.log('üóëÔ∏è  Mevcut yorumlar siliniyor...');
    const reviewsRef = collection(db, 'reviews');
    const snapshot = await getDocs(reviewsRef);
    
    const deletePromises = snapshot.docs.map(docSnap => 
      deleteDoc(doc(db, 'reviews', docSnap.id))
    );
    
    await Promise.all(deletePromises);
    console.log(`‚úÖ ${snapshot.docs.length} yorum silindi`);
  } catch (error) {
    console.error('‚ùå Yorumlar silinirken hata:', error);
    throw error;
  }
};

// T√ºm √ºr√ºnler i√ßin geli≈ümi≈ü yorumlar olu≈ütur
export const generateAdvancedReviews = async () => {
  try {
    console.log('üöÄ Geli≈ümi≈ü yorumlar olu≈üturuluyor...');
    
    // √ñnce mevcut yorumlarƒ± sil
    await clearExistingReviews();
    
    // √úr√ºnleri al - sadece ilk 10 √ºr√ºn√º kullan hƒ±zlƒ± test i√ßin
    const result = await productService.getProducts({ limit: 10 });
    const products = (result.products || []).slice(0, 10);
    
    console.log(`üì¶ ${products.length} √ºr√ºn i√ßin yorum olu≈üturuluyor...`);
    
    const reviewsRef = collection(db, 'reviews');
    let totalReviews = 0;
    
    // Her √ºr√ºn i√ßin yorum olu≈ütur
    for (const product of products) {
      const reviews = generateReviewsForProduct(product);
      
      // Firebase'e kaydet
      const savePromises = reviews.map(review => addDoc(reviewsRef, review));
      await Promise.all(savePromises);
      
      totalReviews += reviews.length;
      console.log(`‚úÖ ${product.name} i√ßin ${reviews.length} yorum eklendi`);
    }
    
    console.log(`üéâ Toplam ${totalReviews} geli≈ümi≈ü yorum olu≈üturuldu!`);
    return { success: true, totalReviews, productsCount: products.length };
    
  } catch (error) {
    console.error('‚ùå Yorumlar olu≈üturulurken hata:', error);
    throw error;
  }
};

// Tek bir fonksiyon olarak export et
export default generateAdvancedReviews;