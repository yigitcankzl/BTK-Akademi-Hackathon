// Gemini API offline/fallback sistemi
// API kullanƒ±lamadƒ±ƒüƒ±nda yerel AI benzeri √∂zellikler saƒülar

class GeminiOfflineMode {
  constructor() {
    this.isOfflineMode = false;
    this.consecutiveFailures = 0;
    this.maxFailures = 3; // 3 ardƒ±≈üƒ±k hata sonrasƒ± offline mode
    this.lastFailureTime = 0;
    this.offlineCooldown = 5 * 60 * 1000; // 5 dakika offline cooldown
    
    // √ñnceden hazƒ±rlanmƒ±≈ü AI benzeri responses
    this.templates = {
      productDescription: [
        "Bu √ºr√ºn, kaliteli malzeme ve modern tasarƒ±mƒ±yla dikkat √ßeken bir se√ßenek.",
        "Y√ºksek performans ve ≈üƒ±k tasarƒ±mƒ± bir araya getiren bu √ºr√ºn, kullanƒ±cƒ±larƒ±n ihtiya√ßlarƒ±nƒ± kar≈üƒ±lar.",
        "Dayanƒ±klƒ± yapƒ±sƒ± ve kullanƒ±m kolaylƒ±ƒüƒ±yla √∂ne √ßƒ±kan bu √ºr√ºn, uzun √∂m√ºrl√º kulanƒ±m sunar.",
        "Teknoloji ve estetik bir araya geldiƒüi bu √ºr√ºnde, kullanƒ±cƒ± deneyimi √∂n planda.",
        "ƒ∞htiya√ßlarƒ±nƒ±zƒ± kar≈üƒ±lamak i√ßin tasarlanan bu √ºr√ºn, g√ºvenilir performans sunar."
      ],
      productTags: [
        ['kaliteli', 'modern', 'g√ºvenilir'],
        ['premium', 'dayanƒ±klƒ±', '≈üƒ±k'],
        ['yenilik√ßi', 'pratik', 'fonksiyonel'],
        ['trend', 'teknolojik', 'kullanƒ±≈ülƒ±'],
        ['pop√ºler', '√∂zel', 'tercih edilen']
      ],
      visualSearch: [
        "Bu g√∂rselde benzer √ºr√ºnler tespit edildi. Kategori ve renk √∂zelliklerine g√∂re e≈üle≈ütirme yapƒ±ldƒ±.",
        "G√∂rsel analizi tamamlandƒ±. Benzer tasarƒ±m √∂zelliklerine sahip √ºr√ºnler bulundu.",
        "G√∂r√ºnt√º i≈üleme sonucu: √úr√ºn kategorisi ve stil √∂zellikleri belirlendi."
      ],
      recommendations: [
        "Kullanƒ±m ge√ßmi≈üiniz ve tercihlerinize g√∂re bu √ºr√ºnler √∂nerilmektedir.",
        "Benzer √ºr√ºnleri inceleyen kullanƒ±cƒ±lar bu se√ßenekleri de beƒüendi.",
        "Size √∂zel se√ßilmi≈ü bu √ºr√ºnler, ilgi alanlarƒ±nƒ±za uygun olarak belirlendi."
      ]
    };
  }

  // Hata durumunu kaydet
  recordFailure() {
    this.consecutiveFailures++;
    this.lastFailureTime = Date.now();
    
    if (this.consecutiveFailures >= this.maxFailures) {
      console.log('üîÑ Gemini API offline mode aktif edildi');
      this.isOfflineMode = true;
    }
  }

  // Ba≈üarƒ±lƒ± istek sonrasƒ± reset
  recordSuccess() {
    this.consecutiveFailures = 0;
    if (this.isOfflineMode) {
      console.log('‚úÖ Gemini API yeniden aktif');
      this.isOfflineMode = false;
    }
  }

  // Offline mode kontrol et
  shouldUseOfflineMode() {
    // Cooldown s√ºresi doldu mu kontrol et
    if (this.isOfflineMode && (Date.now() - this.lastFailureTime > this.offlineCooldown)) {
      console.log('üîÑ Offline cooldown tamamlandƒ±, API tekrar denenecek');
      this.isOfflineMode = false;
      this.consecutiveFailures = 0;
    }
    
    return this.isOfflineMode;
  }

  // Offline product description generator
  generateOfflineDescription(product) {
    const template = this.getRandomTemplate('productDescription');
    const category = product.category || '√ºr√ºn';
    const brand = product.brand || 'marka';
    
    return {
      text: `${template} ${brand} markasƒ±nƒ±n bu ${category} kategorisindeki √ºr√ºn√º, ${product.price ? 
        product.price + ' TL fiyatƒ±yla' : ''} kullanƒ±cƒ±larƒ±n beƒüenisini kazanmaktadƒ±r.`,
      isOffline: true,
      finishReason: 'STOP'
    };
  }

  // Offline product tags generator
  generateOfflineTags(product) {
    const baseTags = this.getRandomTemplate('productTags');
    const categoryTags = this.getCategoryTags(product.category);
    const brandTags = product.brand ? [product.brand.toLowerCase()] : [];
    
    return {
      text: JSON.stringify([...baseTags, ...categoryTags, ...brandTags].slice(0, 6)),
      isOffline: true,
      finishReason: 'STOP'
    };
  }

  // Offline visual search
  generateOfflineVisualSearch(products = []) {
    const template = this.getRandomTemplate('visualSearch');
    
    // Basit g√∂rsel benzerlik sim√ºlasyonu - kategori ve renk bazlƒ±
    const matchedProducts = products.slice(0, 4).map(product => ({
      ...product,
      matchReason: 'Kategori ve g√∂rsel √∂zelliklere g√∂re e≈üle≈üti'
    }));

    return {
      text: template,
      matchedProducts,
      confidence: 0.75,
      isOffline: true
    };
  }

  // Offline recommendations
  generateOfflineRecommendations(userProfile = {}) {
    const template = this.getRandomTemplate('recommendations');
    
    return {
      text: template,
      isOffline: true,
      finishReason: 'STOP'
    };
  }

  // Random template se√ß
  getRandomTemplate(type) {
    const templates = this.templates[type];
    return templates[Math.floor(Math.random() * templates.length)];
  }

  // Kategori bazlƒ± tags
  getCategoryTags(category) {
    const categoryMap = {
      'elektronik': ['teknoloji', 'digital', 'modern'],
      'giyim': ['moda', 'stil', 'trend'],
      'ev-yasam': ['ev', 'konfor', 'ya≈üam'],
      'spor': ['aktif', 'saƒülƒ±k', 'performans'],
      'kitap': ['bilgi', 'eƒüitim', 'k√ºlt√ºr'],
      'oyuncak': ['eƒülence', '√ßocuk', 'oyun']
    };
    
    return categoryMap[category] || ['kalite', '√ºr√ºn'];
  }

  // Offline status bilgisi
  getStatus() {
    return {
      isOffline: this.isOfflineMode,
      consecutiveFailures: this.consecutiveFailures,
      nextRetryTime: this.lastFailureTime + this.offlineCooldown,
      canRetryIn: Math.max(0, (this.lastFailureTime + this.offlineCooldown) - Date.now())
    };
  }

  // Manuel olarak online moda ge√ß
  forceOnlineMode() {
    console.log('üîÑ Manuel olarak online moda ge√ßildi');
    this.isOfflineMode = false;
    this.consecutiveFailures = 0;
    this.lastFailureTime = 0;
  }
}

// Singleton instance
export const geminiOfflineMode = new GeminiOfflineMode();
export default GeminiOfflineMode;